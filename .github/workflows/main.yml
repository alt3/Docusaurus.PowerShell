name: Build
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  MODULE_NAME: Alt3.Docusaurus.PowerShell

jobs:
  # compile the module
  build:
    name: Build Module
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Execute GitVersion
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: Install-RequiredModules
      uses: PoshCode/Actions/install-requiredmodules@v1
      with:
        requiredModules-path: ${{github.workspace}}/Dev/RequiredModules.psd1

    - name: Build Module
      id: build
      uses: PoshCode/actions/build-module@v1
      with:
        path: ${{github.workspace}}/Source
        version: ${{ steps.gitversion.outputs.LegacySemVerPadded }}
        destination: ${{github.workspace}}/output

    - name: Upload Build Output
      uses: actions/upload-artifact@v2
      with:
        name: Modules
        path: ${{github.workspace}}/output

    - name: Upload Tests
      uses: actions/upload-artifact@v2
      with:
        name: PesterTests
        path: ${{github.workspace}}/Tests

    - name: Upload RequiredModules.psd1
      uses: actions/upload-artifact@v2
      with:
        name: RequiredModules
        path: ${{github.workspace}}/Dev/RequiredModules.psd1

    - name: Upload PSScriptAnalyzerSettings.psd1
      uses: actions/upload-artifact@v2
      with:
        name: ScriptAnalyzer
        path: ${{github.workspace}}/PSScriptAnalyzerSettings.psd1

  # ensure code formatting
  lint:
    name: Linting
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -R

    - name: Invoke-ScriptAnalyzer
      uses: devblackops/github-action-psscriptanalyzer@master
      with:
        rootPath: Modules/${{env.MODULE_NAME}}
        repoToken: ${{ secrets.GITHUB_TOKEN }}
        settingsPath: ScriptAnalyzer/PSScriptAnalyzerSettings.psd1

  # run pester tests
  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-18.04, ubuntu-20.04, macOS-10.15, macos-11] # https://github.com/actions/virtual-environments
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -R

    - name: Install-RequiredModules
      uses: PoshCode/Actions/install-requiredmodules@v1
      with:
        requiredModules-path: ${{github.workspace}}/Dev/RequiredModules.psd1

    - uses: PoshCode/Actions/pester@v1
      with:
        pesterVersion: 5.3.3
        codeCoveragePath: Modules/${{env.MODULE_NAME}}
        moduleUnderTest: ${{env.MODULE_NAME}}
        additionalModulePaths: ${{github.workspace}}/Modules

    - name: Publish Test Results artifact
      uses: zyborg/dotnet-tests-report@v1
      with:
        test_results_path: results.xml

    - name: Upload Test Results artifact
      uses: actions/upload-artifact@v2
      with:
        name: PesterResults
        path: ${{github.workspace}}/*.xml

  # code coverage
  coverage:
    needs: [test]
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Display structure of downloaded files
      run: ls -R

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Execute GitVersion
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: CodeCov.io
      uses: codecov/codecov-action@v3
      with:
        files: ${{ github.workspace }}/PesterResults/coverage.xml
        root_dir: ${{github.workspace}}/Modules/${{env.MODULE_NAME}}/${{ steps.gitversion.outputs.MajorMinorPatch }} # sets project root, limit clutter
        verbose: true

    - name: Setup .NET Core # Required to execute ReportGenerator
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.300

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.9
      with:
        reports: ${{ github.workspace }}/PesterResults/coverage.xml # required
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
        sourcedirs: ${{github.workspace}}/Modules/${{env.MODULE_NAME}}/${{ steps.gitversion.outputs.MajorMinorPatch }}
        #historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        #plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        #assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        #classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        #filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        #tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        #license: '' # Optional license for PRO version. Get your license here: https://reportgenerator.io/pro
        #customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        #toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v2.2.3
      with:
        name: CoverageReport # Artifact name
        path: coveragereport # Directory containing files to upload

    # - name: Create code coverage PR message
    #   id: jacoco
    #   uses: madrapps/jacoco-report@main
    #   with:
    #     paths: ${{ github.workspace }}/PesterResults/coverage.xml
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     debug-mode: true

  # -----------------------------------------------------------------------------
  # Publishing stage:
  # - is skipped completely UNLESS on the main branch
  # - is skipped completely UNLESS the commit message contains "[release]"
  # - the psgallery published manifest already contains the bumped module version
  # - the bump-main step bumps copies the artifact manifest to main to match
  #   the PSGallery-published version (without adding [release] to the commit
  #   message)
  # -----------------------------------------------------------------------------
  publish:
    name: Publish
    runs-on: windows-latest
    needs: [lint, coverage]
    if: ${{ github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Execute GitVersion
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true

    - name: Download Artifacts
      uses: actions/download-artifact@v3

    - name: Publish to PSGallery
      uses: ./.github/actions/psgallery-publisher
      env:
        PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      with:
        modulePath: Modules/${{env.MODULE_NAME}}

    - name: Bump Manifest Version on Main
      id: bumpMain
      uses: ./.github/actions/bump-main
      with:
        artifactPath: Modules/${{env.MODULE_NAME}}

    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.gitversion.outputs.LegacySemVerPadded }}
        tag_name: ${{ env.GitVersion_LegacySemVerPadded }}
        target_commitish: main
        draft: false
        prerelease: false
        generate_release_notes: true
